# Este serviço "headless" (sem IP de cluster) é usado para a descoberta interna dos nós do Cassandra.
apiVersion: v1
kind: Service
metadata:
  namespace: cassandra
  name: cassandra-headless # Nome do serviço headless, referenciado no StatefulSet
  labels:
    app: cassandra
spec:
  ports:
    - port: 9042
      name: cql
    - port: 7000
      name: intra-node # Porta para comunicação entre nós (gossip)
  clusterIP: None # Define este como um serviço headless
  selector:
    app: cassandra
---
# Serviço NodePort para o cassandra-0
apiVersion: v1
kind: Service
metadata:
  namespace: cassandra
  name: cassandra-0-client
spec:
  type: NodePort
  ports:
    - port: 9042 # Porta interna do serviço
      targetPort: 9042 # Porta no Pod (CQL)
      nodePort: 30042 # Porta externa no nó do Kind
      name: cql
  selector:
    app: cassandra
    statefulset.kubernetes.io/pod-name: cassandra-0 # Seleciona especificamente o Pod cassandra-0

---
# Serviço NodePort para o cassandra-1
apiVersion: v1
kind: Service
metadata:
  namespace: cassandra
  name: cassandra-1-client
spec:
  type: NodePort
  ports:
    - port: 9042
      targetPort: 9042
      nodePort: 30043
      name: cql
  selector:
    app: cassandra
    statefulset.kubernetes.io/pod-name: cassandra-1 # Seleciona especificamente o Pod cassandra-1

---
# Serviço NodePort para o cassandra-2
apiVersion: v1
kind: Service
metadata:
  namespace: cassandra
  name: cassandra-2-client
spec:
  type: NodePort
  ports:
    - port: 9042
      targetPort: 9042
      nodePort: 30044
      name: cql
  selector:
    app: cassandra
    statefulset.kubernetes.io/pod-name: cassandra-2 # Seleciona especificamente o Pod cassandra-2
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: cassandra
  name: cassandra
spec:
  serviceName: "cassandra-headless" # Referencia o serviço headless criado anteriormente
  replicas: 3 # Número de nós do Cassandra
  selector:
    matchLabels:
      app: cassandra # Deve corresponder aos labels dos Pods
  template: # Define o template do Pod
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 180 # Tempo para o Cassandra desligar graciosamente
      containers:
        - name: cassandra
          image: "cassandra:latest" # Ou "cassandra:4.1.3" conforme seu comentário
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7000
              name: intra-node
            - containerPort: 9042
              name: cql
          env:
            - name: CASSANDRA_CLUSTER_NAME
              value: "my-cluster"
            - name: CASSANDRA_DC
              value: "my-datacenter-1"
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: "GossipingPropertyFileSnitch"
            - name: POD_NAMESPACE # Injeta o namespace do Pod
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CASSANDRA_SEEDS # O primeiro nó (cassandra-0) será o seed principal
              value: "cassandra-0.cassandra-headless.$(POD_NAMESPACE).svc.cluster.local"
            - name: MAX_HEAP_SIZE
              value: "1024M"
            - name: HEAP_NEWSIZE
              value: "1M"
            - name: CASSANDRA_START_RPC
              value: "true"
            - name: CASSANDRA_RPC_ADDRESS
              value: "0.0.0.0"
            - name: POD_IP # Injeta o IP do Pod
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CASSANDRA_LISTEN_ADDRESS # Cassandra escuta no IP do Pod
              value: "$(POD_IP)"
            - name: CASSANDRA_BROADCAST_ADDRESS # Endereço que o Cassandra anuncia para outros nós
              value: "$(POD_IP)"
            # CASSANDRA_BROADCAST_RPC_ADDRESS também pode ser $(POD_IP) se RPC estiver habilitado e precisar ser anunciado

          # Health Checks (sondas de prontidão e vivacidade)
          readinessProbe: # Verifica se o nó está pronto para receber tráfego
            exec:
              command:
                - /bin/bash
                - -c
                - "nodetool status | grep -w UN" # UN = Up/Normal
            initialDelaySeconds: 120 # Equivalente ao start_period de 2m
            periodSeconds: 120 # Equivalente ao interval de 2m
            timeoutSeconds: 10 # Timeout da checagem
            failureThreshold: 3 # Número de tentativas antes de falhar
            successThreshold: 1
          livenessProbe: # Verifica se o nó está vivo; se falhar, o Kubelet reinicia o container
            exec:
              command:
                - /bin/bash
                - -c
                - "nodetool status | grep -w UN"
            initialDelaySeconds: 180 # Maior delay inicial para a sonda de vivacidade
            periodSeconds: 120
            timeoutSeconds: 10
            failureThreshold: 3

          volumeMounts:
            - name: cassandra-data # Nome do volume definido em volumeClaimTemplates
              mountPath: /var/lib/cassandra

  volumeClaimTemplates: # Define como os PersistentVolumeClaims (PVCs) são criados
    - metadata:
        namespace: cassandra # Nome do PVC
        name: cassandra-data # O nome usado em volumeMounts
      spec:
        accessModes: ["ReadWriteOnce"] # Modo de acesso padrão para armazenamento em bloco
        resources:
          requests:
            storage: 5Gi
